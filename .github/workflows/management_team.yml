name: Management Team CI/CD

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better context

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔍 Verify installation
      run: |
        python --version
        pip list

    - name: 🧪 Run validation tests
      run: |
        echo "Running validation tests..."
        python cli/manage.py validate
      continue-on-error: false

    - name: 📊 Show system status
      if: always()
      run: |
        python cli/manage.py list
        if [ -d "outputs/reports" ]; then
          python cli/manage.py status || echo "No previous build summaries"
        fi

    - name: 🚀 Run full pipeline (if not PR)
      if: github.event_name != 'pull_request'
      run: |
        echo "Running full Management Team pipeline..."
        python cli/manage.py run || echo "Pipeline completed with warnings"
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}

    - name: ✅ Final validation
      if: github.event_name != 'pull_request'
      run: |
        python cli/manage.py validate

    - name: 📤 Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: management-team-artifacts-${{ github.run_number }}
        path: |
          outputs/
          logs/
        retention-days: 30
        if-no-files-found: warn

    - name: 📋 Generate summary
      if: always()
      run: |
        echo "## 🎯 Management Team CI Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "outputs/reports" ]; then
          LATEST_VALIDATION=$(ls -t outputs/reports/validation_report_*.md 2>/dev/null | head -1)
          if [ -f "$LATEST_VALIDATION" ]; then
            echo "### ✅ Validation Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            grep -A 5 "Valid Files:" "$LATEST_VALIDATION" >> $GITHUB_STEP_SUMMARY || true
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

    - name: 🤖 Auto-commit build summary (main only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && success()
      run: |
        if [ -d "outputs/reports" ]; then
          LATEST_SUMMARY=$(ls -t outputs/reports/build_summary_*.md 2>/dev/null | head -1)
          if [ -f "$LATEST_SUMMARY" ]; then
            cp "$LATEST_SUMMARY" build_summary_latest.md
            
            git config user.name "management-team-bot"
            git config user.email "bot@managementteam.ai"
            git add build_summary_latest.md
            
            if git diff --staged --quiet; then
              echo "No changes to commit"
            else
              git commit -m "🤖 Auto-update: Latest build summary [skip ci]"
              git push
            fi
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: 🎨 Check code formatting with Black
      run: |
        echo "Checking code formatting..."
        black --check --diff .
      continue-on-error: true

    - name: 🔍 Lint with Ruff
      run: |
        echo "Running Ruff linter..."
        ruff check . --output-format=github
      continue-on-error: true

    - name: 🧪 Run tests with pytest
      run: |
        echo "Running test suite..."
        pytest tests/ -v --cov --cov-report=term-missing --cov-report=xml
      continue-on-error: true

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

    - name: 📊 Code Statistics
      run: |
        echo "## 📊 Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Statistics" >> $GITHUB_STEP_SUMMARY
        echo "**Python files:** $(find . -name '*.py' -not -path './venv/*' -not -path './.venv/*' | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "**Total lines:** $(find . -name '*.py' -not -path './venv/*' -not -path './.venv/*' -exec cat {} \; | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Quality Checks" >> $GITHUB_STEP_SUMMARY
        echo "- Black formatting: See above" >> $GITHUB_STEP_SUMMARY
        echo "- Ruff linting: See above" >> $GITHUB_STEP_SUMMARY
        echo "- Pytest tests: See above" >> $GITHUB_STEP_SUMMARY

  documentation-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 📚 Verify documentation
      run: |
        echo "Checking required documentation..."
        
        REQUIRED_DOCS=(
          "README.md"
          "SYSTEM_100_PERCENT_COMPLETE.md"
          "docs/system/PRD.md"
          "QUICK_START.md"
        )
        
        MISSING=0
        for doc in "${REQUIRED_DOCS[@]}"; do
          if [ -f "$doc" ]; then
            echo "✅ $doc"
          else
            echo "❌ Missing: $doc"
            MISSING=$((MISSING+1))
          fi
        done
        
        if [ $MISSING -gt 0 ]; then
          echo "⚠️ Warning: $MISSING required documentation file(s) missing"
        else
          echo "✅ All required documentation present"
        fi

    - name: 📋 Generate documentation summary
      run: |
        echo "## 📚 Documentation Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Markdown files:** $(find . -name '*.md' | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "**YAML files:** $(find . -name '*.yaml' -o -name '*.yml' | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "**Python files:** $(find . -name '*.py' -not -path './venv/*' | wc -l)" >> $GITHUB_STEP_SUMMARY

