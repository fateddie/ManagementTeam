# ==============================================
# Python Project Configuration
# ==============================================
# Configuration for Black, Ruff, and other Python tools

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-management-team"
version = "4.0.0"
description = "AI-powered management layer system for startup idea evaluation"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Robert Freyne", email = "your-email@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# ==============================================
# Black Configuration (Code Formatter)
# ==============================================
[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
)/
'''

# ==============================================
# Ruff Configuration (Linter & Formatter)
# ==============================================
[tool.ruff]
line-length = 100
target-version = "py311"

# Exclude directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort (import sorting)
    "N",   # pep8-naming
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "C90", # mccabe complexity
    "S",   # flake8-bandit (security)
    "T20", # flake8-print (catch print statements)
    "PT",  # flake8-pytest-style
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (handled by Black)
    "S101",  # Use of assert (OK in tests)
    "T201",  # Print statements (we use these for CLI output)
    "S311",  # Random for non-cryptographic use (OK for our use case)
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values and assertions
"tests/**/*.py" = ["S101", "PLR2004"]
"**/test_*.py" = ["S101", "PLR2004"]

# Scripts can use print statements
"scripts/**/*.py" = ["T201"]
"cli/**/*.py" = ["T201"]

[tool.ruff.lint.mccabe]
# Maximum allowed complexity
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["agents", "core", "src", "config"]

# ==============================================
# Pytest Configuration
# ==============================================
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=agents",
    "--cov=core",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# ==============================================
# Coverage Configuration
# ==============================================
[tool.coverage.run]
source = ["agents", "core", "src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# ==============================================
# MyPy Configuration (Type Checking)
# ==============================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_optional = true

# Ignore missing imports for third-party packages
[[tool.mypy.overrides]]
module = [
    "praw.*",
    "pytrends.*",
    "tweepy.*",
    "textblob.*",
    "streamlit.*",
    "plotly.*",
]
ignore_missing_imports = true
